## Handling r0 being used for both input 1 and return value:

- Map rax to a different register, say r28
- If it's an internal function call, then at the end of each function declaration, move r28 into r0
- if it's an external function call, then add this wrapper around function calls:
    ```
    move r0, first_argument
    call func
    move r28, r0
    ```
- You can tell if it's the end of a function declaration by checking if the next instruction is `ret`
- You can tell if it's an internal/external function call by checking if the label is defined within the program

## Handling only the first 6 args being passed through registers on x86 but it's the first 8 args on arm64:

- Every time that it pushes, it'll just do (pseudocode that looks more like x86 even tho it'll be done in arm64):
    ```
    push <something>
    mov r6, r7
    mov r7, <something>
    ```
